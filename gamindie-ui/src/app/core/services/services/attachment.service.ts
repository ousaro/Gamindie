/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { AttachmentResponse } from '../models/attachment-response';
import { deleteAttachment } from '../fn/attachment/delete-attachment';
import { DeleteAttachment$Params } from '../fn/attachment/delete-attachment';
import { getAllAttachments } from '../fn/attachment/get-all-attachments';
import { GetAllAttachments$Params } from '../fn/attachment/get-all-attachments';
import { uploadAttachment } from '../fn/attachment/upload-attachment';
import { UploadAttachment$Params } from '../fn/attachment/upload-attachment';
import { uploadAttachmentPostman } from '../fn/attachment/upload-attachment-postman';
import { UploadAttachmentPostman$Params } from '../fn/attachment/upload-attachment-postman';

@Injectable({ providedIn: 'root' })
export class AttachmentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `uploadAttachmentPostman()` */
  static readonly UploadAttachmentPostmanPath = '/attachments/postman';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadAttachmentPostman()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadAttachmentPostman$Response(params: UploadAttachmentPostman$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return uploadAttachmentPostman(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadAttachmentPostman$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadAttachmentPostman(params: UploadAttachmentPostman$Params, context?: HttpContext): Observable<number> {
    return this.uploadAttachmentPostman$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getAllAttachments()` */
  static readonly GetAllAttachmentsPath = '/attachments/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getAllAttachments()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAttachments$Response(params?: GetAllAttachments$Params, context?: HttpContext): Observable<StrictHttpResponse<Array<AttachmentResponse>>> {
    return getAllAttachments(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getAllAttachments$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getAllAttachments(params?: GetAllAttachments$Params, context?: HttpContext): Observable<Array<AttachmentResponse>> {
    return this.getAllAttachments$Response(params, context).pipe(
      map((r: StrictHttpResponse<Array<AttachmentResponse>>): Array<AttachmentResponse> => r.body)
    );
  }

  /** Path part for operation `uploadAttachment()` */
  static readonly UploadAttachmentPath = '/attachments/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `uploadAttachment()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadAttachment$Response(params: UploadAttachment$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return uploadAttachment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `uploadAttachment$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  uploadAttachment(params: UploadAttachment$Params, context?: HttpContext): Observable<number> {
    return this.uploadAttachment$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `deleteAttachment()` */
  static readonly DeleteAttachmentPath = '/attachments/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteAttachment()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAttachment$Response(params: DeleteAttachment$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteAttachment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteAttachment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteAttachment(params: DeleteAttachment$Params, context?: HttpContext): Observable<void> {
    return this.deleteAttachment$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
