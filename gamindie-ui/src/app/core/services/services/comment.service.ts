/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { createComment } from '../fn/comment/create-comment';
import { CreateComment$Params } from '../fn/comment/create-comment';
import { deleteComment } from '../fn/comment/delete-comment';
import { DeleteComment$Params } from '../fn/comment/delete-comment';
import { getDirectReplies } from '../fn/comment/get-direct-replies';
import { GetDirectReplies$Params } from '../fn/comment/get-direct-replies';
import { getTopLevelComments } from '../fn/comment/get-top-level-comments';
import { GetTopLevelComments$Params } from '../fn/comment/get-top-level-comments';
import { PageResponseCommentResponse } from '../models/page-response-comment-response';

@Injectable({ providedIn: 'root' })
export class CommentService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `getTopLevelComments()` */
  static readonly GetTopLevelCommentsPath = '/comments/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getTopLevelComments()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTopLevelComments$Response(params: GetTopLevelComments$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCommentResponse>> {
    return getTopLevelComments(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getTopLevelComments$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getTopLevelComments(params: GetTopLevelComments$Params, context?: HttpContext): Observable<PageResponseCommentResponse> {
    return this.getTopLevelComments$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCommentResponse>): PageResponseCommentResponse => r.body)
    );
  }

  /** Path part for operation `createComment()` */
  static readonly CreateCommentPath = '/comments/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createComment()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createComment$Response(params: CreateComment$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return createComment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createComment$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createComment(params: CreateComment$Params, context?: HttpContext): Observable<number> {
    return this.createComment$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `getDirectReplies()` */
  static readonly GetDirectRepliesPath = '/comments/{id}/replies';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getDirectReplies()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDirectReplies$Response(params: GetDirectReplies$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponseCommentResponse>> {
    return getDirectReplies(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getDirectReplies$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getDirectReplies(params: GetDirectReplies$Params, context?: HttpContext): Observable<PageResponseCommentResponse> {
    return this.getDirectReplies$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponseCommentResponse>): PageResponseCommentResponse => r.body)
    );
  }

  /** Path part for operation `deleteComment()` */
  static readonly DeleteCommentPath = '/comments/{id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deleteComment()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteComment$Response(params: DeleteComment$Params, context?: HttpContext): Observable<StrictHttpResponse<void>> {
    return deleteComment(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deleteComment$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deleteComment(params: DeleteComment$Params, context?: HttpContext): Observable<void> {
    return this.deleteComment$Response(params, context).pipe(
      map((r: StrictHttpResponse<void>): void => r.body)
    );
  }

}
