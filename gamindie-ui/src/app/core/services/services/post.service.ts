/* tslint:disable */
/* eslint-disable */
/* Code generated by ng-openapi-gen DO NOT EDIT. */

import { HttpClient, HttpContext } from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import { map } from 'rxjs/operators';

import { BaseService } from '../base-service';
import { ApiConfiguration } from '../api-configuration';
import { StrictHttpResponse } from '../strict-http-response';

import { countPostsByOwner } from '../fn/post/count-posts-by-owner';
import { CountPostsByOwner$Params } from '../fn/post/count-posts-by-owner';
import { createPost } from '../fn/post/create-post';
import { CreatePost$Params } from '../fn/post/create-post';
import { deletePost } from '../fn/post/delete-post';
import { DeletePost$Params } from '../fn/post/delete-post';
import { findAllPosts } from '../fn/post/find-all-posts';
import { FindAllPosts$Params } from '../fn/post/find-all-posts';
import { findAllPostsByOwner } from '../fn/post/find-all-posts-by-owner';
import { FindAllPostsByOwner$Params } from '../fn/post/find-all-posts-by-owner';
import { findPostById } from '../fn/post/find-post-by-id';
import { FindPostById$Params } from '../fn/post/find-post-by-id';
import { getFriendFeed } from '../fn/post/get-friend-feed';
import { GetFriendFeed$Params } from '../fn/post/get-friend-feed';
import { PageResponsePostResponse } from '../models/page-response-post-response';
import { PostResponse } from '../models/post-response';

@Injectable({ providedIn: 'root' })
export class PostService extends BaseService {
  constructor(config: ApiConfiguration, http: HttpClient) {
    super(config, http);
  }

  /** Path part for operation `findAllPosts()` */
  static readonly FindAllPostsPath = '/posts/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllPosts()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllPosts$Response(params?: FindAllPosts$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePostResponse>> {
    return findAllPosts(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllPosts$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllPosts(params?: FindAllPosts$Params, context?: HttpContext): Observable<PageResponsePostResponse> {
    return this.findAllPosts$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePostResponse>): PageResponsePostResponse => r.body)
    );
  }

  /** Path part for operation `createPost()` */
  static readonly CreatePostPath = '/posts/';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `createPost()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPost$Response(params: CreatePost$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return createPost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `createPost$Response()` instead.
   *
   * This method sends `application/json` and handles request body of type `application/json`.
   */
  createPost(params: CreatePost$Params, context?: HttpContext): Observable<number> {
    return this.createPost$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findPostById()` */
  static readonly FindPostByIdPath = '/posts/{post-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findPostById()` instead.
   *
   * This method doesn't expect any request body.
   */
  findPostById$Response(params: FindPostById$Params, context?: HttpContext): Observable<StrictHttpResponse<PostResponse>> {
    return findPostById(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findPostById$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findPostById(params: FindPostById$Params, context?: HttpContext): Observable<PostResponse> {
    return this.findPostById$Response(params, context).pipe(
      map((r: StrictHttpResponse<PostResponse>): PostResponse => r.body)
    );
  }

  /** Path part for operation `deletePost()` */
  static readonly DeletePostPath = '/posts/{post-id}';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `deletePost()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePost$Response(params: DeletePost$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return deletePost(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `deletePost$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  deletePost(params: DeletePost$Params, context?: HttpContext): Observable<number> {
    return this.deletePost$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `countPostsByOwner()` */
  static readonly CountPostsByOwnerPath = '/posts/{owner-id}/count';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `countPostsByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  countPostsByOwner$Response(params: CountPostsByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<number>> {
    return countPostsByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `countPostsByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  countPostsByOwner(params: CountPostsByOwner$Params, context?: HttpContext): Observable<number> {
    return this.countPostsByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<number>): number => r.body)
    );
  }

  /** Path part for operation `findAllPostsByOwner()` */
  static readonly FindAllPostsByOwnerPath = '/posts/owner';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `findAllPostsByOwner()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllPostsByOwner$Response(params?: FindAllPostsByOwner$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePostResponse>> {
    return findAllPostsByOwner(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `findAllPostsByOwner$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  findAllPostsByOwner(params?: FindAllPostsByOwner$Params, context?: HttpContext): Observable<PageResponsePostResponse> {
    return this.findAllPostsByOwner$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePostResponse>): PageResponsePostResponse => r.body)
    );
  }

  /** Path part for operation `getFriendFeed()` */
  static readonly GetFriendFeedPath = '/posts/feed';

  /**
   * This method provides access to the full `HttpResponse`, allowing access to response headers.
   * To access only the response body, use `getFriendFeed()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriendFeed$Response(params?: GetFriendFeed$Params, context?: HttpContext): Observable<StrictHttpResponse<PageResponsePostResponse>> {
    return getFriendFeed(this.http, this.rootUrl, params, context);
  }

  /**
   * This method provides access only to the response body.
   * To access the full response (for headers, for example), `getFriendFeed$Response()` instead.
   *
   * This method doesn't expect any request body.
   */
  getFriendFeed(params?: GetFriendFeed$Params, context?: HttpContext): Observable<PageResponsePostResponse> {
    return this.getFriendFeed$Response(params, context).pipe(
      map((r: StrictHttpResponse<PageResponsePostResponse>): PageResponsePostResponse => r.body)
    );
  }

}
